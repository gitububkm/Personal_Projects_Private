#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π userbot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
–†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Telethon. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –≤ .env —Ñ–∞–π–ª–µ.
–ê–≤—Ç–æ—Ä: –≤—ã (–ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ .env)
"""

import os
import re
import asyncio
from datetime import datetime, time
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.tl.types import PeerUser
from telethon.errors import FloodWaitError

load_dotenv()

# --- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤ .env) ---
API_ID = int(os.getenv("API_ID", "0"))
API_HASH = os.getenv("API_HASH", "")
ME_ID = os.getenv("ME_ID", "").strip()        # –≤–∞—à —á–∏—Å–ª–æ–≤–æ–π Telegram ID (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
GIRL_ID = os.getenv("GIRL_ID", "").strip()    # –µ—ë —á–∏—Å–ª–æ–≤–æ–π Telegram ID (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≤ .env) ---
MODE = os.getenv("MODE", "auto").lower()      # "auto" | "draft"
QUIET_HOURS = os.getenv("QUIET_HOURS", "23-08")
MIN_REPLY_GAP_SEC = int(os.getenv("MIN_REPLY_GAP_SEC", "1800"))
APPEND_AUTO_TAG = os.getenv("APPEND_AUTO_TAG", "true").lower() == "true"

OPENING_TEXT = os.getenv("OPENING_TEXT", "–°–µ–π—á–∞—Å –Ω–µ —É —ç–∫—Ä–∞–Ω–∞, –æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ ‚ù§Ô∏è")
BUSY_TEXT = os.getenv("BUSY_TEXT", "–°–µ–π—á–∞—Å –∑–∞–Ω—è—Ç(–∞), –Ω–∞–ø–∏—à—É –∫–∞–∫ –æ—Å–≤–æ–±–æ–∂—É—Å—å.")
MEET_TEXT = os.getenv("MEET_TEXT", "–î–∞–≤–∞–π —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ 19:00? –ú–æ–≥—É –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å—Å—è.")
CARE_TEXT = os.getenv("CARE_TEXT", "–û–±–Ω–∏–º–∞—é, –¥—É–º–∞—é –æ —Ç–µ–±–µ ü´∂")
DEFAULT_TEXT = os.getenv("DEFAULT_TEXT", "–ü—Ä–∏–Ω—è–ª(–∞) —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—á—É.")

SESSION_NAME = os.getenv("SESSION_NAME", "girl_responder_session")

# ------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -------------
def parse_quiet_hours(s: str):
    m = re.match(r"^\s*(\d{1,2})\s*-\s*(\d{1,2})\s*$", s)
    if not m:
        return time(23, 0), time(8, 0)
    a, b = int(m.group(1)), int(m.group(2))
    return time(a % 24, 0), time(b % 24, 0)

Q_START, Q_END = parse_quiet_hours(QUIET_HOURS)

def in_quiet_hours(now: datetime) -> bool:
    t = now.time()
    if Q_START <= Q_END:
        return Q_START <= t < Q_END
    return t >= Q_START or t < Q_END

def suggest_replies(text: str):
    t = (text or "").lower()
    suggestions = []
    if any(w in t for w in ["–∫–∞–∫ —Ç—ã", "–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ —Ç—ã?"]):
        suggestions.append(OPENING_TEXT)
    if any(w in t for w in ["–∫–æ–≥–¥–∞", "–≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è", "–≤–æ —Å–∫–æ–ª—å–∫–æ"]):
        suggestions.append(MEET_TEXT)
    if any(w in t for w in ["—Å–∫—É—á", "–ª—é–±–ª—é", "miss", "–ª—é–±–ª"]):
        suggestions.append(CARE_TEXT)
    if any(w in t for w in ["–∑–∞–Ω—è—Ç", "busy", "—Ä–∞–±–æ—Ç"]):
        suggestions.append(BUSY_TEXT)
    if not suggestions:
        suggestions.append(DEFAULT_TEXT)
    return suggestions[:3]

def add_auto_tag(text: str) -> str:
    return f"{text} {'[–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç]' if APPEND_AUTO_TAG else ''}".strip()

last_reply_at = {}

# ----------------- Telethon client -----------------
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

async def resolve_target():
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç-—Ü–µ–ª—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) –ø–æ GIRL_ID
    if GIRL_ID and GIRL_ID.isdigit():
        return PeerUser(int(GIRL_ID))
    if GIRL_ID and GIRL_ID.startswith("@"):
        ent = await client.get_entity(GIRL_ID)
        return ent
    # –µ—Å–ª–∏ GIRL_ID –Ω–µ —É–∫–∞–∑–∞–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ª—é–±–æ–≥–æ ‚Äî –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã
    return None

HELP_TEXT = (
    "–ö–æ–º–∞–Ω–¥—ã (–ø–∏—à–∏—Ç–µ —Å–µ–±–µ –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'):\n"
    "/mode auto|draft  ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º\n"
    "/quiet HH-HH      ‚Äî –∑–∞–¥–∞—Ç—å —Ç–∏—Ö–∏–µ —á–∞—Å—ã, –ø—Ä–∏–º–µ—Ä: /quiet 22-08\n"
    "/gap <—Å–µ–∫>        ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω—Ç–∏-—Å–ø–∞–º–∞, –ø—Ä–∏–º–µ—Ä: /gap 900\n"
    "/tag on|off       ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–º–µ—Ç–∫—É [–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç]\n"
    "/ping             ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É\n"
)

@client.on(events.NewMessage(from_users="me"))
async def self_cmd_handler(event: events.NewMessage.Event):
    text = (event.raw_text or "").strip()
    if text.lower() in ("/help", "help"):
        await event.reply(HELP_TEXT); return

    if text.startswith("/mode"):
        parts = text.split()
        if len(parts) >= 2 and parts[1].lower() in ("auto", "draft"):
            global MODE
            MODE = parts[1].lower()
            await event.reply(f"–†–µ–∂–∏–º: {MODE}")
        else:
            await event.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mode auto|draft")
        return

    if text.startswith("/quiet"):
        parts = text.split()
        if len(parts) == 2:
            global Q_START, Q_END
            Q_START, Q_END = parse_quiet_hours(parts[1])
            await event.reply(f"–¢–∏—Ö–∏–µ —á–∞—Å—ã: {Q_START.strftime('%H:%M')}-{Q_END.strftime('%H:%M')}")
        else:
            await event.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /quiet HH-HH")
        return

    if text.startswith("/gap"):
        parts = text.split()
        if len(parts) == 2 and parts[1].isdigit():
            global MIN_REPLY_GAP_SEC
            MIN_REPLY_GAP_SEC = int(parts[1])
            await event.reply(f"MIN_REPLY_GAP_SEC={MIN_REPLY_GAP_SEC}")
        else:
            await event.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gap <—Å–µ–∫—É–Ω–¥>")
        return

    if text.startswith("/tag"):
        parts = text.split()
        if len(parts) == 2 and parts[1].lower() in ("on", "off"):
            global APPEND_AUTO_TAG
            APPEND_AUTO_TAG = parts[1].lower() == "on"
            await event.reply(f"APPEND_AUTO_TAG={APPEND_AUTO_TAG}")
        else:
            await event.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tag on|off")
        return

    if text.strip() == "/ping":
        await event.reply("pong"); return

@client.on(events.NewMessage(incoming=True))
async def on_pm(event: events.NewMessage.Event):
    # —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (private)
    if not event.is_private:
        return

    # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω GIRL_ID ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –µ—ë —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if GIRL_ID and GIRL_ID.isdigit() and event.chat_id != int(GIRL_ID):
        return

    now = datetime.now()
    text = event.raw_text or ""

    if MODE == "draft":
        await client.send_message("me",
            f"–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.sender_id}:\n\n{text}\n\n(—Ä–µ–∂–∏–º draft ‚Äî –æ—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é –≤ —ç—Ç–æ–º —á–∞—Ç–µ)"
        )
        return

    last = last_reply_at.get(event.chat_id)
    if last and (now - last).total_seconds() < MIN_REPLY_GAP_SEC:
        return

    if in_quiet_hours(now):
        reply = add_auto_tag("–ü–æ–∑–∂–µ —Å–≤—è–∂—É—Å—å, —Å–µ–π—á–∞—Å –Ω–µ —É —ç–∫—Ä–∞–Ω–∞ üåô")
        await asyncio.sleep(1.2)
        try:
            await event.reply(reply)
            last_reply_at[event.chat_id] = now
            await client.send_message("me", f"[auto] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–∏—Ö–∏–µ —á–∞—Å—ã):\n{text}\n‚Üí {reply}")
        except Exception:
            await client.send_message("me", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–∏—Ö–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
        return

    suggestions = suggest_replies(text)
    reply = add_auto_tag(suggestions[0])

    try:
        await asyncio.sleep(1.0 + len(text) * 0.02)
        await event.reply(reply)
        last_reply_at[event.chat_id] = now
        await client.send_message("me", f"[auto] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n{text}\n‚Üí {reply}")
    except FloodWaitError as fw:
        await client.send_message("me", f"FloodWait {fw.seconds}s. –û—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await client.send_message("me", f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def main():
    print("–ó–∞–ø—É—Å–∫ girl_responder...")
    await client.start()
    print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /help –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' –¥–ª—è –∫–æ–º–∞–Ω–¥.")
    await client.run_until_disconnected()

if __name__ == "__main__":
    with client:
        client.loop.run_until_complete(main())
