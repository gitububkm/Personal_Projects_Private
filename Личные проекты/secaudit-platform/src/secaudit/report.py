from __future__ import annotations
import os, io
from typing import List
from .models import Report, Finding, Severity
from jinja2 import Template

HTML_TMPL = Template("""
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>SecAudit Report</title>
<style>
body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 20px; }
h1 { margin-bottom: 0; }
h2 { margin-top: 2rem; }
table { border-collapse: collapse; width: 100%; }
th, td { border: 1px solid #ddd; padding: 8px; font-size: 14px; }
th { background: #f5f5f5; text-align: left; }
.badge { padding: 2px 6px; border-radius: 6px; color: #fff; font-size: 12px; }
.badge.INFO { background: #6c757d; }
.badge.LOW { background: #198754; }
.badge.MEDIUM { background: #ffc107; color: #222; }
.badge.HIGH { background: #fd7e14; }
.badge.CRITICAL { background: #dc3545; }
small { color: #666; }
</style>
</head>
<body>
<h1>SecAudit Report</h1>
<p><strong>Target:</strong> {{ report.target }}</p>
<p><strong>Total findings:</strong> {{ report.findings|length }}</p>

<table>
<thead><tr><th>Severity</th><th>Message</th><th>File</th><th>Line</th></tr></thead>
<tbody>
{% for f in report.findings %}
<tr>
  <td><span class="badge {{f.severity}}">{{f.severity}}</span></td>
  <td>{{f.message}}</td>
  <td>{{f.file or ''}}</td>
  <td>{{f.line or ''}}</td>
</tr>
{% endfor %}
</tbody>
</table>

<p><small>Generated by SecAudit MVP</small></p>
</body>
</html>
""")

def to_html(report: Report) -> str:
    return HTML_TMPL.render(report=report)

def to_pdf(report: Report, out_path: str) -> None:
    try:
        from reportlab.lib.pagesizes import A4
        from reportlab.lib.styles import getSampleStyleSheet
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
        from reportlab.lib import colors

        doc = SimpleDocTemplate(out_path, pagesize=A4)
        styles = getSampleStyleSheet()
        flow = []
        flow.append(Paragraph(f"<b>SecAudit Report</b>", styles['Title']))
        flow.append(Paragraph(f"Target: {report.target}", styles['Normal']))
        flow.append(Paragraph(f"Total findings: {len(report.findings)}", styles['Normal']))
        flow.append(Spacer(1, 12))

        data = [['Severity','Message','File','Line']]
        for f in report.findings:
            data.append([f.severity, f.message, f.file or '', str(f.line or '')])

        table = Table(data, repeatRows=1)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
            ('GRID', (0,0), (-1,-1), 0.25, colors.grey),
            ('FONT', (0,0), (-1,-1), 'Helvetica', 9),
        ]))
        flow.append(table)
        doc.build(flow)
    except Exception as e:
        raise RuntimeError(f"PDF generation failed: {e}")
