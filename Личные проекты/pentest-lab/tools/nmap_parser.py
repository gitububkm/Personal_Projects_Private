#!/usr/bin/env python3
"""
nmap_parser.py
Парсит nmap XML (nmap -oX) и генерирует простой Markdown отчёт.
usage: python3 nmap_parser.py <input_xml> <output_md>
"""
import sys
import xml.etree.ElementTree as ET
from pathlib import Path

def parse_nmap_xml(path):
    tree = ET.parse(path)
    root = tree.getroot()
    hosts = []
    for host in root.findall('host'):
        addr_el = host.find('address')
        addr = addr_el.attrib.get('addr') if addr_el is not None else 'unknown'
        status_el = host.find('status')
        status = status_el.attrib.get('state') if status_el is not None else 'unknown'
        ports = []
        ports_el = host.find('ports')
        if ports_el is not None:
            for p in ports_el.findall('port'):
                portnum = p.attrib.get('portid')
                proto = p.attrib.get('protocol')
                state_el = p.find('state')
                state = state_el.attrib.get('state') if state_el is not None else ''
                svc = p.find('service')
                svcname = svc.attrib.get('name') if svc is not None else ''
                banners = svc.attrib.get('product','') if svc is not None else ''
                ports.append({'port': portnum, 'proto': proto, 'state': state, 'service': svcname, 'banner': banners})
        hosts.append({'addr': addr, 'status': status, 'ports': ports})
    return hosts

def to_markdown(hosts, outpath):
    with open(outpath, 'w', encoding='utf-8') as f:
        f.write("# Nmap scan results\n\n")
        for h in hosts:
            f.write(f"## Host: {h['addr']} — {h['status']}\n\n")
            if not h['ports']:
                f.write("_No open ports found._\n\n")
                continue
            f.write("| Port | Proto | State | Service | Banner |\n")
            f.write("|---:|:---:|:---:|:---|:---|\n")
            for p in h['ports']:
                banner = p['banner'] or "-"
                f.write(f"| {p['port']} | {p['proto']} | {p['state']} | {p['service']} | {banner} |\n")
            f.write("\n")

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: nmap_parser.py input.xml output.md")
        sys.exit(1)
    inp = Path(sys.argv[1])
    out = Path(sys.argv[2])
    hosts = parse_nmap_xml(inp)
    to_markdown(hosts, out)
    print(f"[+] Markdown report written to {out}")
